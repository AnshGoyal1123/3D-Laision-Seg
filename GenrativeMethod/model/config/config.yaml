# config.yaml

# Model Parameters
model_name: ""

# Log info
wandb: false

# Dataset Parameters
CT_root: "/home/bruno/xfang/dataset/images"
DWI_root: "/scratch4/rsteven1/DWI_coregis_20231208"
ADC_root: "/scratch4/rsteven1/ADC_coregis_20231228"
label_root: "/home/bruno/xfang/dataset/labels"
MRI_type: "ADC"  # Choices: ADC, DWI, Other
map_file: "/home/bruno/3D-Laision-Seg/GenrativeMethod/efficient_ct_dir_name_to_XNATSessionID_mapping.json"

# Image Transformations
scale_intensity: false
spatial_pad: false
histogram_equal: false
padding_size: [224, 224, 224]
flip: false
rand_spatial_crop: false
crop_size: [96, 96, 96]
rand_affine: false
to_tensor: true

# Training Parameters
learning_rate: 1e-3
epochs: 800
batch_size: 1
gradient_accumulation_steps: 1

# Additional Arguments
resuming: false
checkpoint_path: null

# def parse_args():
#     parser = argparse.ArgumentParser(description="StrokeAI Training Script")

#     # Model Parameters
#     ### You have to give a name of the model name
#     parser.add_argument('--model_name', type=str, required=True, help='Name of the model to use')

#     # log info
#     parser.add_argument('--wandb', action='store_true', help='log data to wandb')

#     # Dataset Parameters
#     parser.add_argument('--CT_root', type=str, default='/home/bruno/xfang/dataset/images', help='Root directory for CT images')
#     parser.add_argument('--DWI_root', type=str, default='/scratch4/rsteven1/DWI_coregis_20231208', help='Root directory for DWI images')
#     parser.add_argument('--ADC_root', type=str, default='/scratch4/rsteven1/ADC_coregis_20231228', help='Root directory for ADC images')
#     parser.add_argument('--label_root', type=str, default='/home/bruno/xfang/dataset/labels', help='Root directory for label images')
#     parser.add_argument('--MRI_type', type=str, default='ADC', choices=['ADC', 'DWI', 'Other'], help='Type of MRI images')
#     parser.add_argument('--map_file', type=str, default= "/home/bruno/3D-Laision-Seg/GenrativeMethod/efficient_ct_dir_name_to_XNATSessionID_mapping.json", help='Path to the map file')
    
#     parser.add_argument('--scale_intensity', action='store_true', help='Apply ScaleIntensityd transform')
#     parser.add_argument('--spatial_pad', action='store_true', help='Apply SpatialPadd transform')
#     parser.add_argument('--padding_size', nargs=3, type=int, default=[224, 224, 224], help='Padding size')
#     parser.add_argument('--flip', action='store_true',help='Flip along x,y,z')
#     parser.add_argument('--rand_spatial_crop', action='store_true',help='Apply RandSpatialCropd transform')
#     parser.add_argument('--crop_size', nargs=3, type=int, default=[96, 96, 96], help='Spatial size for RandSpatialCropd')
#     parser.add_argument('--rand_affine', action='store_true', help='Apply RandAffined transform')
#     parser.add_argument('--to_tensor', action='store_false', help='Apply ToTensord transform')


#     # Training Parameters
#     parser.add_argument('--learning_rate', type=float, default=1e-5, help='Learning rate for the optimizer')
#     parser.add_argument('--epochs', type=int, default=1000, help='Number of training epochs')
#     parser.add_argument('--batch_size', type=int, default=1, help='Batch size for training and testing')
#     parser.add_argument('--gradient_accumulation_steps', type=int, default=1, help='Number of gradient accumulation steps')

#     # Add more arguments as needed
#     parser.add_argument('--resuming', action='store_true', help='Continue trianing from previous checkpoint')
#     parser.add_argument('--checkpoint_path', type=str, default=None, help='Path for model checkpoint')

#     return parser.parse_args()